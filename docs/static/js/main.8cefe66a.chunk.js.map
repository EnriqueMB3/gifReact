{"version":3,"sources":["reportWebVitals.js","components/AddCategory.js","helpers/GetGifs.js","components/GridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cat","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","console","log","GridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","imgs","useFetchGifs","GifExpertApp","categorias","setCategorias","idx","ReactDOM","render","document","getElementById"],"mappings":"6KAYeA,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,cCFAQ,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAETC,mBAAS,IAFA,mBAEtCC,EAFsC,KAE1BC,EAF0B,KAe7C,OACI,mCACA,sBAAMC,SAVW,SAACC,GAClBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAc,SAAAS,GAAG,OAAMP,GAAN,mBAAqBO,OACtCN,EAAc,MAMlB,SACI,uBAAOO,KAAK,OAAOC,MAAOT,EAAaU,SAf1B,SAACP,GACnBF,EAAcE,EAAEQ,OAAOF,e,+BCTjBG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACbC,EADa,0FAC4EC,UAAUH,GADtF,sBAEAI,MAAMF,GAFN,cAEbG,EAFa,gBAGIA,EAAKC,OAHT,uBAGXC,EAHW,EAGXA,KACFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAG1Ca,QAAQC,IAAIR,GAXO,kBAYXA,GAZW,4CAAH,sDCEPS,EAAW,SAAC,GAAoB,EAAnBN,GAAoB,IAAhBC,EAAe,EAAfA,MAAOV,EAAQ,EAARA,IACjC,OACI,qBAAKgB,UAAU,yCAAf,SACI,qBAAKC,IAAKjB,EAAKkB,IAAKR,OCEnBS,EAAU,SAAC,GAAgB,IAAfrB,EAAc,EAAdA,SAAc,ECJX,SAAEA,GAAc,IAAD,EACbd,mBAAS,CAC/BqB,KAAM,GACNe,SAAS,IAH0B,mBAChCC,EADgC,KACzBC,EADyB,KA2BvC,OAbAC,qBAAU,WAEN1B,EAAQC,GACHtB,MAAK,SAAAgD,GACFF,EAAS,CACLjB,KAAMmB,EACNJ,SAAQ,SAIrB,CAACtB,IAGGuB,EDrB6BI,CAAa3B,GAAnCa,EAFqB,EAE1BN,KAAee,EAFW,EAEXA,QAKxB,OACI,qCACA,6BACKtB,IAEJsB,GAAW,2CAEZ,oBAAIJ,UAAU,YAAd,SAEIL,EAAOJ,KAAI,SAAAC,GAAG,OACZ,cAAC,EAAD,eAA2BA,GAAZA,EAAIC,aEnBnBiB,EAAe,WAAQ,IAAD,EAEI1C,mBAAS,CAAC,SAFd,mBAEzB2C,EAFyB,KAEbC,EAFa,KAOhC,OACI,qCACA,gDACI,uBACJ,cAAC,EAAD,CAAa7C,cAAe6C,IAC5B,6BAEQD,EAAWpB,KAAI,SAACf,EAAKqC,GAAN,OAAc,cAAC,EAAD,CAAS/B,SAAUN,GAAUqC,YCX1EC,IAASC,OACL,cAAC,EAAD,IACAC,SAASC,eAAe,SAS5B5D,M","file":"static/js/main.8cefe66a.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, {useState} from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\n\r\nexport  const AddCategory = ({setCategories}) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n    const handleChange = (e) =>{\r\n       setInputValue(e.target.value)\r\n    }\r\n\r\n    const handleSubmit = (e) =>{\r\n        e.preventDefault();\r\n        if (inputValue.trim().length > 2) {\r\n            setCategories(cat => [ inputValue, ...cat ])\r\n            setInputValue('');\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n        <form onSubmit={handleSubmit}>\r\n            <input type=\"text\" value={inputValue}  onChange={handleChange}\r\n            />\r\n        </form>\r\n        </>\r\n    );\r\n}\r\n\r\n\r\nAddCategory.propTypes = {\r\n    setCategories : PropTypes.func.isRequired\r\n}","export const getGifs = async(category) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?api_key=zXBwWjcY8KPS9ZVFTxgs1VLHjkw1GaP2&q=${encodeURI(category)}&limit=10`;\r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json();\r\n    const gifs = data.map(img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n    console.log(gifs);\r\n     return gifs;\r\n}","import React from 'react'\r\n\r\nexport const GridItem = ({id, title, url})=> {\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n            <img src={url} alt={title}/>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GridItem } from './GridItem';\r\n\r\n\r\n\r\n\r\nexport const GifGrid = ({category}) => {\r\n\r\n    const  { data:images ,  loading } = useFetchGifs(category);\r\n   \r\n\r\n  \r\n\r\n    return (\r\n        <>\r\n        <h3>\r\n            {category}\r\n        </h3>\r\n        {loading && <p>Loading...</p>}\r\n        \r\n        <ol className=\"card-grid\">\r\n        {\r\n            images.map(img => (\r\n              <GridItem key={img.id} {...img}></GridItem>\r\n            ))\r\n        }\r\n        </ol>\r\n        \r\n        </>\r\n        \r\n    )}\r\n","import {useState, useEffect} from 'react';\r\nimport { getGifs } from '../helpers/GetGifs';\r\n\r\nexport const useFetchGifs = ( category ) =>{\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true,\r\n    })\r\n\r\n    \r\n    // const [images, setImages] = useState([]);\r\n    // useEffect(()=>{\r\n    //     getGifs(category)\r\n    //         .then(setImages);\r\n    // }, [category])\r\n    \r\n\r\n    useEffect(()=>{\r\n\r\n        getGifs(category)\r\n            .then(imgs =>{\r\n                setState({\r\n                    data: imgs,\r\n                    loading:false,\r\n                })\r\n            })\r\n\r\n    }, [category])\r\n   \r\n\r\n    return state;\r\n\r\n\r\n\r\n}","\r\nimport React, {useState} from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nexport  const GifExpertApp = () =>  {\r\n\r\n    const [categorias, setCategorias] = useState(['Rick'])\r\n\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n        <h2>Gif Expert App</h2>\r\n            <hr/>\r\n        <AddCategory setCategories={setCategorias}></AddCategory>\r\n        <ol>\r\n            {\r\n                categorias.map((cat, idx) => <GifGrid category={cat} key={idx}></GifGrid>)\r\n            }\r\n        </ol>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport { GifExpertApp } from './GifExpertApp';\n\n\n\nReactDOM.render( \n    <GifExpertApp/ > ,\n    document.getElementById('root')\n);\n\n\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();"],"sourceRoot":""}